package mazeinterface; // Khai b√°o package ch·ª©a l·ªõp MazeIntro

import javax.imageio.ImageIO; // D√πng ƒë·ªÉ ƒë·ªçc ·∫£nh
import javax.swing.*; // Th∆∞ vi·ªán Swing cho giao di·ªán ng∆∞·ªùi d√πng
import java.awt.*; // Th∆∞ vi·ªán ƒë·ªì h·ªça
import java.awt.event.*; // X·ª≠ l√Ω s·ª± ki·ªán
import java.awt.image.BufferedImage; // ·∫¢nh c√≥ th·ªÉ thao t√°c pixel
import java.awt.image.ConvolveOp; // D√πng ƒë·ªÉ l√†m m·ªù ·∫£nh
import java.awt.image.Kernel; // Kernel cho filter
import java.net.URL; // D√πng ƒë·ªÉ l·∫•y t√†i nguy√™n t·ª´ file
import javax.sound.sampled.*; // Th∆∞ vi·ªán √¢m thanh
import java.io.*; // ƒê·ªçc/ghi file

import java.util.ArrayList;
import java.util.List;

// L·ªõp hi·ªÉn th·ªã ƒëo·∫°n gi·ªõi thi·ªáu ƒë·∫ßu game d∆∞·ªõi d·∫°ng h·ªôi tho·∫°i
public class MazeIntro extends JDialog {
    // ƒê∆∞·ªùng d·∫´n t√†i nguy√™n
    private static final String BACKGROUND_IMAGE_PATH = "/mazeai/MazeImage/MazeIntro.jpg";
    private static final String NPC_IMAGE_PATH = "/mazeai/MazeImage/NPCImage.png";
    private static final String PLAYER_IMAGE_PATH = "/mazeai/MazeImage/PlayerImage.png";
    private static final String DIALOGUE_FILE_PATH = "/mazeai/MazeDialogues/intro_dialog.txt";

    private JLabel npcImageLabel; // Hi·ªÉn th·ªã ·∫£nh NPC
    private JLabel playerImageLabel; // Hi·ªÉn th·ªã ·∫£nh ng∆∞·ªùi ch∆°i
    private JLabel speakerLabel; // Hi·ªÉn th·ªã t√™n ng∆∞·ªùi n√≥i
    private JTextArea dialogArea; // Khu v·ª±c hi·ªÉn th·ªã l·ªùi tho·∫°i
    private Timer typingTimer; // Timer ƒë·ªÉ hi·ªán t·ª´ng k√Ω t·ª±

    private List<String[]> dialogues = new ArrayList<>(); // Danh s√°ch c√°c c√¢u tho·∫°i
    private int dialogueIndex = 0; // C√¢u tho·∫°i hi·ªán t·∫°i
    private String currentLine = ""; // D√≤ng hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã
    private int charIndex = 0; // V·ªã tr√≠ k√Ω t·ª± ƒëang hi·ªÉn th·ªã

    private ImageIcon npcBrightIcon, npcDimIcon, playerBrightIcon, playerDimIcon; // C√°c ·∫£nh s√°ng/t·ªëi
    private Clip introClip; // √Çm thanh ƒëo·∫°n intro
    private boolean isMuted = false; // Tr·∫°ng th√°i t·∫Øt ti·∫øng

    // Constructor kh·ªüi t·∫°o c·ª≠a s·ªï intro
    public MazeIntro(Frame parent) {
        super(parent, "M·ªü ƒë·∫ßu tr√≤ ch∆°i", true); // T·∫°o dialog modal
        setUndecorated(true); // Kh√¥ng vi·ªÅn
        setSize(Toolkit.getDefaultToolkit().getScreenSize()); // Full m√†n h√¨nh
        setLayout(null); // T·ª± set layout th·ªß c√¥ng

        loadDialogues(); // T·∫£i l·ªùi tho·∫°i t·ª´ file

        try {
            // L√†m m·ªù ·∫£nh n·ªÅn
            BufferedImage original = ImageIO.read(getClass().getResource(BACKGROUND_IMAGE_PATH));
            float[] blurKernel = {
                1f / 16f, 2f / 16f, 1f / 16f,
                2f / 16f, 4f / 16f, 2f / 16f,
                1f / 16f, 2f / 16f, 1f / 16f
            };
            ConvolveOp op = new ConvolveOp(new Kernel(3, 3, blurKernel));
            BufferedImage blurred = op.filter(original, null);
            Image scaledBlur = blurred.getScaledInstance(
                Toolkit.getDefaultToolkit().getScreenSize().width,
                Toolkit.getDefaultToolkit().getScreenSize().height,
                Image.SCALE_SMOOTH);
            JLabel backgroundLabel = new JLabel(new ImageIcon(scaledBlur));
            backgroundLabel.setBounds(0, 0, getWidth(), getHeight());
            setContentPane(backgroundLabel); // ƒê·∫∑t ·∫£nh l√†m n·ªÅn
            getContentPane().setLayout(null); // Layout th·ªß c√¥ng
        } catch (Exception e) {
            getContentPane().setBackground(Color.BLACK); // N·∫øu l·ªói th√¨ d√πng n·ªÅn ƒëen
            e.printStackTrace();
        }

        // T·∫£i ·∫£nh s√°ng/t·ªëi
        npcBrightIcon = loadImage(NPC_IMAGE_PATH);
        npcDimIcon = makeDimmedIcon(npcBrightIcon);
        playerBrightIcon = loadImage(PLAYER_IMAGE_PATH);
        playerDimIcon = makeDimmedIcon(playerBrightIcon);

        // G√°n ·∫£nh NPC
        npcImageLabel = new JLabel();
        npcImageLabel.setBounds(50, 100, 500, 500);
        getContentPane().add(npcImageLabel);

        // G√°n ·∫£nh ng∆∞·ªùi ch∆°i
        playerImageLabel = new JLabel();
        getContentPane().add(playerImageLabel);

        // Nh√£n hi·ªÉn th·ªã t√™n ng∆∞·ªùi n√≥i
        speakerLabel = new JLabel(" ");
        speakerLabel.setFont(new Font("Serif", Font.BOLD, 28));
        speakerLabel.setHorizontalAlignment(SwingConstants.LEFT);
        getContentPane().add(speakerLabel);

        // Khu v·ª±c hi·ªÉn th·ªã l·ªùi tho·∫°i
        dialogArea = new JTextArea();
        dialogArea.setLineWrap(true);
        dialogArea.setWrapStyleWord(true);
        dialogArea.setFont(new Font("Serif", Font.PLAIN, 26));
        dialogArea.setEditable(false);
        dialogArea.setBackground(Color.DARK_GRAY);

        // Cu·ªôn n·∫øu l·ªùi tho·∫°i d√†i
        JScrollPane scrollPane = new JScrollPane(dialogArea);
        scrollPane.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        getContentPane().add(scrollPane);

        // N√∫t t·∫Øt ti·∫øng
        JButton muteButton = new JButton("üîä");
        muteButton.setBounds(getWidth() - 120, 50, 100, 40);
        muteButton.addActionListener(e -> toggleMute());
        getContentPane().add(muteButton);

        // N√∫t b·ªè qua ƒëo·∫°n gi·ªõi thi·ªáu
        JButton skipButton = new JButton("Skip");
        skipButton.setBounds(getWidth() - 120, 100, 100, 40);
        skipButton.addActionListener(e -> skipIntro());
        getContentPane().add(skipButton);

        // Set v·ªã tr√≠ c√°c th√†nh ph·∫ßn khi giao di·ªán s·∫µn s√†ng
        SwingUtilities.invokeLater(() -> {
            int w = getWidth();
            int h = getHeight();
            playerImageLabel.setBounds(w - 450, 110, 400, 600);
            speakerLabel.setBounds(50, h - 200, w - 100, 40);
            scrollPane.setBounds(50, h - 150, w - 200, 100);
        });

        playSound("/mazeai/MazeSound/MazeSound.wav"); // B·∫≠t nh·∫°c n·ªÅn
        showNextDialogue(); // Hi·ªÉn th·ªã c√¢u tho·∫°i ƒë·∫ßu

        // X·ª≠ l√Ω Alt+F4 (ƒë√≥ng ho√†n to√†n)
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (introClip != null) {
                    introClip.stop();
                }
                System.exit(0);
            }
        });

        // Nh·∫•n ph√≠m s·∫Ω chuy·ªÉn ti·∫øp tho·∫°i
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                showNextDialogue();
            }
        });

        // Click chu·ªôt c≈©ng chuy·ªÉn tho·∫°i
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                showNextDialogue();
            }
        });

        setFocusable(true); // Cho ph√©p nh·∫≠n ph√≠m
    }

    // T·∫£i l·ªùi tho·∫°i t·ª´ file
    private void loadDialogues() {
        InputStream is = getClass().getResourceAsStream(DIALOGUE_FILE_PATH);
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(":", 2); // Format: speaker: content
                    if (parts.length == 2) {
                        dialogues.add(new String[]{parts[0].trim(), parts[1].trim()});
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Hi·ªÉn th·ªã c√¢u tho·∫°i ti·∫øp theo, c√≥ hi·ªáu ·ª©ng g√µ ch·ªØ
    private void showNextDialogue() {
        if (dialogueIndex < dialogues.size()) {
            String speaker = dialogues.get(dialogueIndex)[0];
            currentLine = dialogues.get(dialogueIndex)[1];
            charIndex = 0;
            dialogArea.setText("");
            highlightSpeaker(speaker); // T√¥ s√°ng ng∆∞·ªùi n√≥i

            if (typingTimer != null && typingTimer.isRunning()) {
                typingTimer.stop();
            }

            typingTimer = new Timer(35, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (charIndex < currentLine.length()) {
                        dialogArea.append(String.valueOf(currentLine.charAt(charIndex)));
                        charIndex++;
                    } else {
                        typingTimer.stop();
                        dialogueIndex++;
                    }
                }
            });
            typingTimer.start();
        } else {
            // H·∫øt tho·∫°i th√¨ th√¥ng b√°o b·∫Øt ƒë·∫ßu game
            JOptionPane.showMessageDialog(this, "B·∫Øt ƒë·∫ßu v√†o Game!");
            System.exit(0);
        }
    }

    // L√†m s√°ng ng∆∞·ªùi n√≥i v√† l√†m m·ªù ng∆∞·ªùi c√≤n l·∫°i
    private void highlightSpeaker(String speaker) {
        if (speaker.equals("npc")) {
            npcImageLabel.setIcon(npcBrightIcon);
            playerImageLabel.setIcon(playerDimIcon);
            speakerLabel.setText("NPC:");
            speakerLabel.setForeground(Color.PINK);
            dialogArea.setForeground(Color.PINK);
        } else {
            npcImageLabel.setIcon(npcDimIcon);
            playerImageLabel.setIcon(playerBrightIcon);
            speakerLabel.setText("Player:");
            speakerLabel.setForeground(Color.CYAN);
            dialogArea.setForeground(Color.CYAN);
        }
    }

    // L√†m m·ªù ·∫£nh
    private ImageIcon makeDimmedIcon(ImageIcon original) {
        Image img = original.getImage();
        Image dimmed = new ImageIcon(GrayFilter.createDisabledImage(img)).getImage()
                .getScaledInstance(400, 400, Image.SCALE_SMOOTH);
        return new ImageIcon(dimmed);
    }

    // T·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n
    private ImageIcon loadImage(String path) {
        URL url = getClass().getResource(path);
        if (url == null) {
            System.err.println("T√†i nguy√™n kh√¥ng t√¨m th·∫•y: " + path);
            return new ImageIcon();
        }
        return new ImageIcon(url);
    }

    // B·∫≠t nh·∫°c n·ªÅn
    private void playSound(String soundPath) {
        try {
            URL soundURL = getClass().getResource(soundPath);
            if (soundURL != null) {
                AudioInputStream audioIn = AudioSystem.getAudioInputStream(soundURL);
                introClip = AudioSystem.getClip();
                introClip.open(audioIn);
                introClip.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // B·∫≠t/t·∫Øt ti·∫øng
    private void toggleMute() {
        if (isMuted) {
            if (introClip != null) {
                introClip.start();
            }
            isMuted = false;
        } else {
            if (introClip != null) {
                introClip.stop();
            }
            isMuted = true;
        }
    }

    // B·ªè qua ph·∫ßn intro, chuy·ªÉn lu√¥n ƒë·∫øn h·∫øt tho·∫°i
    private void skipIntro() {
        dialogueIndex = dialogues.size();
        showNextDialogue();
    }
}
